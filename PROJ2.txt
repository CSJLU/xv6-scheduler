# Changing race condition to child first

Create fork_winner() system call to set child first/parent first
To do so, system call is made (files involved: user.h, syscall.h, usys.S, sysproc.c, syscall.c, proc.h)
Global variable named forkwinner is declared in sysproc.c and externed in proc.c so that fork() in proc.c can access it to determine race condition.
fork_winner() function that is defined in sysproc.c stores user argument of either 1 or 0 to forkwinner variable (0 = parent first, 1 = child first)
Code is added to fork() in proc.c. The code calls yield if forkwinner is equal to 1, forcing the parent to give execution to the child first. 



# Stride scheduling policy

Created set_sched(), transfer_tickets(), and tickets_owned() system calls for various functionalities (edited user.h, syscall.h, usys.S, sysproc.c, syscall.c)
Global variable named schedulestate is declared in sysproc.c and externed in proc.c so that scheduler() in proc.c can access it to determine scheduling policy.
set_sched() function in sysproc.c stores user argument of either 1 or 0 to schedulestate (0 = default round robin, 1 = stride scheduler)
transfer_tickets() function uses a helper function defined in proc.c (for ease of accessing data) to handle transferring tickets and errors.
tickets_owned() returns the amount of tickets for a process with a provided PID number.

Added variables within the proc structure declared in proc.h to store ticket, stride, and pass values.
Added code to fork() and exit() which iterate over the proc table to find the number of procs. This is used to then equally distribute tickets to each running/runnable process.




// Contributions  
Johnny: Worked on and implemented child-first race condition (with Evan). Implemented stride scheduler function in proc.c. Code was written to find the process with the min pass value.  
Schedule this process to be ran (context switch to min process's context which allows that process to be executed). 
Created user level get_tickets_owned function which is called by tickets_owned system call, which effectively gets process ticket number based off pid argument. 
Helped debug many different issues.

Evan: Worked on and implemented child-first race condition (with Johnny). Implemented the transfer_tickets() and original set_sched() systemcalls.
Created the helper function transfer_manager() for transfer_tickets() within proc.c. Added the mechanisms for updating ticket/stride/pass values in fork() and exit().
Answered question 2 and question 3 of the QnA portion in full.
Helped debug many different issues.

Nick: Helped implement stride scheduler function. Aided with the get_tickets_owned function. Assited in debuging issues in stride scheduler and child-first race conditon. 
Contributed to answering questions. 
